# This workflow allows you to report, givern a list of organizations, whether
# a GitHub app of a particular APPID is installed on tah torganization.
# It will open an issue in the repository the workflow is installed in
# list the organizations and whether or not the app is installed on that org
# If the app is installed, it will provide  alink to that installation's JSON data
# as an archive of the workflow run

name: List App Installs

on:
  # manual dispatch
  workflow_dispatch:

jobs:

  open_preliminary_issue:
    name: Open Preliminary Issue
    runs-on: ubuntu-latest
    outputs:
      issue_url: ${{ steps.create-issue.outputs.url }}
    steps:

      - name: Checkout
        uses: actions/checkout@v3.5.2

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      - name: Create an issue
        id: create-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          THEURL=$(gh issue create --title 'Listing App Installations for ${{ steps.date.outputs.date }}' --body '### Listing App Installations for ${{ steps.date.outputs.date }}.\
          \
          Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' --label 'automation' --label 'app installations')
          echo "url=$THEURL" >> $GITHUB_OUTPUT

  matrix_maker:
    needs: [open_preliminary_issue]
    name: Matrix Maker
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.result }}
    steps:
      - uses: actions/github-script@v6
        id: set-matrix
        with:
          script: |
            try {
            // programmatically build the list of orgs (with whatever token needed), here I will hard code
            return ["github", "affraes-organisation", "affraes-entowned-organization"]
            }
            catch {
              core.setFailed(`Failed to get list of orgs: ${error}`)
            }

      - name: Debug output
        run: echo "${{ steps.set-matrix.outputs.result }}"

  list_app_installs:
    needs: [matrix_maker, open_preliminary_issue]
    name: List App Installs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        org: ${{fromJson(needs.matrix_maker.outputs.matrix)}}
    steps:                            
      - name: GitHub app JWT and installation access token generation
        id: get_token
        uses: jamestrousdale/github-app-jwt-token@0.1.4
        with:
          app-id: ${{ secrets.LISTINSTALLS_APPID }}
          private-key: ${{ secrets.LISTINSTALLS_KEY }}

      - name: Get List
        id: get_list
        env:
          GH_TOKEN: ${{ steps.get_token.outputs.jwt }}
        run: |
          mkdir -p output
          gh api -H "Authorization: Bearer ${{ steps.get_token.outputs.jwt }}" orgs/${{matrix.org}}/installation > output/${{matrix.org}}.json

      - name: Add to issue if failure
        if: failure()
        id: failure-add-to-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{needs.open_preliminary_issue.outputs.issue_url}} --body 'The org `${{matrix.org}}` does not contain an installation.'


      - name: Upload app installation json artifact for ${{matrix.org}} if installation detected
        if: success()
        id: success-upload-app-installation-json-artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.org}}
          path: output/${{matrix.org}}.json

      - name: Add to issue if success
        if: success()
        id: success-add-to-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{needs.open_preliminary_issue.outputs.issue_url}} --body 'The org `${{matrix.org}}` contains an installation. \
          
          Installation JSON: ${{github.server_url}}/${{github.repository}}/actions/artifacts/${{steps.success-upload-app-installation-json-artifact.outputs.artifact_id}}/zip'
       
